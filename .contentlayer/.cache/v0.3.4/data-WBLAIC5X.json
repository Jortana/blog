{
  "cacheItemsMap": {
    "posts/load-local-resources-in-plex.md": {
      "document": {
        "title": "Plex 加载本地 nfo 文件和本地外挂字幕",
        "date": "2021-07-29T23:01:31.000Z",
        "category": "服务器应用",
        "tags": [
          "Plex",
          "家庭影院系统",
          "家用服务器"
        ],
        "headerImage": "https://ab84760.webp.li/plex-cover.jpg",
        "draft": false,
        "body": {
          "raw": "\n前几天在鼓捣 Plex 的时候吃了一记 [tinyMediaManager](https://www.tinymediamanager.org/) 的安利。tMM 的好处在于你可以清楚地看到每部电影、电视剧的各种信息，是没找到、漏了一些还是全找到了，一目了然，但是当 Plex 导入资料库时，往往不会用你搜集好的信息和图片，可能会自己再去搜一次，搜的不一定对，浪费时间，如果出现要手工调整的情况操作起来也比 tMM 麻烦一些，如何让 Plex 自动识别本地的信息呢，需要利用到 Plex 的插件：XBMCnfoMoviesImporter 和 XBMCnfoTVImporter。\n\n<!-- more -->\n\n要实现上述功能只需要两大步：加载插件和配置插件。\n\n## 1 加载插件\n\n### 1.1 下载插件\n\n这里提供三个下载方式，其中包含的文件都是一样的，GitHub 链接、百度网盘和我的私有网盘。如果网盘都失效了而且 GitHub链接出现问题，可以自行去 GitHub上搜索这两个插件。\n\nGitHub：\n\n​ XBMCnfoMoviesImporter：[仓库地址](https://github.com/gboudreau/XBMCnfoMoviesImporter.bundle) [下载地址](https://github.com/gboudreau/XBMCnfoMoviesImporter.bundle/archive/master.zip)\n\n​ XBMCnfoTVImporter：[仓库地址](https://github.com/gboudreau/XBMCnfoTVImporter.bundle) [下载地址](https://github.com/gboudreau/XBMCnfoTVImporter.bundle/archive/master.zip)\n\n[百度网盘](https://pan.baidu.com/s/1-1xVafu0Pt7XZVlovIWFqg) 提取码：mict\n\n### 1.2 安装插件\n\n下载完成后解压，你会得到两个文件夹，如果你是从 GitHub 上下载，注意更改一下文件夹的名字，确保这两个文件夹的名字是 **XBMCnfoMoviesImporter.bundle** 和 **XBMCnfoTVImporter.bundle**。然后将这两个文件夹放到 Plex 的插件目录下，在官网的 [说明文档](https://support.plex.tv/articles/202915258-where-is-the-plex-media-server-data-directory-located/) 中可以找到你的平台对应的目录。\n\n我是在 Ubuntu Server 中安装的，所以我的目录为 `/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/Plug-ins/` ，注意后面多了一个 `/Plug-ins/`，官网给的目录是 Plex 的安装目录，我们要把插件复制到 **插件文件夹** 里去。\n\n将两个文件夹都丢进去之后，我们重启 Plex 服务，Linux 用户可以使用命令 `sudo service plexmediaserver restart`，接下来进行一下插件的配置。\n\n## 2 配置插件\n\n### 2.1 使 Plex 加载本地信息\n\n说是配置插件，实际上是配置资料库的代理。进入 Plex 的控制面板，点击设置，左边的导航条拉到最下面，选择 **管理** 下的 **资料库**，找到你需要操作的资料库点击 **编辑资料库**。\n\n在编辑面板中选择 **高级**，并更改代理，如果是电影资料库就将代理改为 XBMCnfoMoviesImporter，如果是电视节目资料库就将代理改为 XBMCnfoTVImporter。\n\n根据网上的经验，最好关闭 Enable generating Collections from tags 这一选项（只有电影资料库有）并将 Collections 选项调整为 Disabled。\n\n![更改代理](https://ab84760.webp.li/image-20210730235320150.png)\n\n### 使 Plex 加载本地字幕\n\n到这一步，插件已经可以帮我们加载本地的影片信息了，但是还不能自动加载本地外挂字幕，即使字幕的命名没有问题，Plex 也不能识别，还需要对插件本身进行配置。\n\n从左边导航栏找到 **设置** 下的 **代理**，在右边的电影和电视节目中可以看到我们刚刚加载的插件，将插件下的 Local Media Assets **勾选上**。\n\n![加载本地字幕](https://ab84760.webp.li/image-20210731000245536.png)\n\n这时候，刷新资料库的元数据，你会发现所有的信息包括海报、缩略图、字幕等全都已经按照本地的文件加载好了。\n",
          "html": "<p>前几天在鼓捣 Plex 的时候吃了一记 <a href=\"https://www.tinymediamanager.org/\">tinyMediaManager</a> 的安利。tMM 的好处在于你可以清楚地看到每部电影、电视剧的各种信息，是没找到、漏了一些还是全找到了，一目了然，但是当 Plex 导入资料库时，往往不会用你搜集好的信息和图片，可能会自己再去搜一次，搜的不一定对，浪费时间，如果出现要手工调整的情况操作起来也比 tMM 麻烦一些，如何让 Plex 自动识别本地的信息呢，需要利用到 Plex 的插件：XBMCnfoMoviesImporter 和 XBMCnfoTVImporter。</p>\n<p>要实现上述功能只需要两大步：加载插件和配置插件。</p>\n<h2>1 加载插件</h2>\n<h3>1.1 下载插件</h3>\n<p>这里提供三个下载方式，其中包含的文件都是一样的，GitHub 链接、百度网盘和我的私有网盘。如果网盘都失效了而且 GitHub链接出现问题，可以自行去 GitHub上搜索这两个插件。</p>\n<p>GitHub：</p>\n<p>​ XBMCnfoMoviesImporter：<a href=\"https://github.com/gboudreau/XBMCnfoMoviesImporter.bundle\">仓库地址</a> <a href=\"https://github.com/gboudreau/XBMCnfoMoviesImporter.bundle/archive/master.zip\">下载地址</a></p>\n<p>​ XBMCnfoTVImporter：<a href=\"https://github.com/gboudreau/XBMCnfoTVImporter.bundle\">仓库地址</a> <a href=\"https://github.com/gboudreau/XBMCnfoTVImporter.bundle/archive/master.zip\">下载地址</a></p>\n<p><a href=\"https://pan.baidu.com/s/1-1xVafu0Pt7XZVlovIWFqg\">百度网盘</a> 提取码：mict</p>\n<h3>1.2 安装插件</h3>\n<p>下载完成后解压，你会得到两个文件夹，如果你是从 GitHub 上下载，注意更改一下文件夹的名字，确保这两个文件夹的名字是 <strong>XBMCnfoMoviesImporter.bundle</strong> 和 <strong>XBMCnfoTVImporter.bundle</strong>。然后将这两个文件夹放到 Plex 的插件目录下，在官网的 <a href=\"https://support.plex.tv/articles/202915258-where-is-the-plex-media-server-data-directory-located/\">说明文档</a> 中可以找到你的平台对应的目录。</p>\n<p>我是在 Ubuntu Server 中安装的，所以我的目录为 <code>/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/Plug-ins/</code> ，注意后面多了一个 <code>/Plug-ins/</code>，官网给的目录是 Plex 的安装目录，我们要把插件复制到 <strong>插件文件夹</strong> 里去。</p>\n<p>将两个文件夹都丢进去之后，我们重启 Plex 服务，Linux 用户可以使用命令 <code>sudo service plexmediaserver restart</code>，接下来进行一下插件的配置。</p>\n<h2>2 配置插件</h2>\n<h3>2.1 使 Plex 加载本地信息</h3>\n<p>说是配置插件，实际上是配置资料库的代理。进入 Plex 的控制面板，点击设置，左边的导航条拉到最下面，选择 <strong>管理</strong> 下的 <strong>资料库</strong>，找到你需要操作的资料库点击 <strong>编辑资料库</strong>。</p>\n<p>在编辑面板中选择 <strong>高级</strong>，并更改代理，如果是电影资料库就将代理改为 XBMCnfoMoviesImporter，如果是电视节目资料库就将代理改为 XBMCnfoTVImporter。</p>\n<p>根据网上的经验，最好关闭 Enable generating Collections from tags 这一选项（只有电影资料库有）并将 Collections 选项调整为 Disabled。</p>\n<p><img src=\"https://ab84760.webp.li/image-20210730235320150.png\" alt=\"更改代理\"></p>\n<h3>使 Plex 加载本地字幕</h3>\n<p>到这一步，插件已经可以帮我们加载本地的影片信息了，但是还不能自动加载本地外挂字幕，即使字幕的命名没有问题，Plex 也不能识别，还需要对插件本身进行配置。</p>\n<p>从左边导航栏找到 <strong>设置</strong> 下的 <strong>代理</strong>，在右边的电影和电视节目中可以看到我们刚刚加载的插件，将插件下的 Local Media Assets <strong>勾选上</strong>。</p>\n<p><img src=\"https://ab84760.webp.li/image-20210731000245536.png\" alt=\"加载本地字幕\"></p>\n<p>这时候，刷新资料库的元数据，你会发现所有的信息包括海报、缩略图、字幕等全都已经按照本地的文件加载好了。</p>"
        },
        "_id": "posts/load-local-resources-in-plex.md",
        "_raw": {
          "sourceFilePath": "posts/load-local-resources-in-plex.md",
          "sourceFileName": "load-local-resources-in-plex.md",
          "sourceFileDir": "posts",
          "contentType": "markdown",
          "flattenedPath": "posts/load-local-resources-in-plex"
        },
        "type": "Post",
        "url": "/post/load-local-resources-in-plex",
        "excerpt": "前几天在鼓捣 Plex 的时候吃了一记 tinyMediaManager 的安利。tMM 的好处在于你可以清楚地看到每部电影、电视剧的各种信息，是没找到、漏了一些还是全找到了，一目了然，但是当 Plex 导入资料库时，往往不会用你搜集好的信息和图片，可能会自己再去搜一次，搜的不一定对，浪费时间，如果出现要手工调整的情况操作起来也比 tMM 麻烦一些，如何让 Plex 自动识别本地的信息呢，需要利用到 Plex 的插件：XBMCnfoMoviesImporter 和 XBMCnfoTVImporter。",
        "slug": "load-local-resources-in-plex",
        "readingTime": "NaN分钟阅读"
      },
      "documentHash": "1727538277362",
      "hasWarnings": false,
      "documentTypeName": "Post"
    },
    "posts/seal-easyconnect-with-docker.md": {
      "document": {
        "title": "用docker封印EasyConnect并连接远程桌面和数据库",
        "date": "2021-07-13T15:25:44.000Z",
        "category": "实用工具",
        "tags": [
          "Docker",
          "EasyConnect",
          "Clash",
          "实用工具"
        ],
        "headerImage": "https://ab84760.webp.li/docker-seal-new-1.jpg",
        "draft": false,
        "body": {
          "raw": "\n我们学校要使用深信服家的 EasyConnect 才能在外面连内网，我又经常需要连学校的电脑和数据库，在使用了一段时间 EasyConnect 之后，我发现这玩意儿不仅流氓，而且难用。流氓在于不用他的时候进程关不掉，卸载还卸载不干净，也不知道他到底要获取什么数据，关于深信服的黑料网上一搜一大堆。难用在于我一开他，虽然是能连上学校内网了，但是我们学校校园网非常差劲，速度本身就不快，还经常连不上 GitHub，用了他之后，我在路由器上配置的代理也没有用，所以我心想能不能抛弃这个流氓客户端，就在不久前，我终于找到了一套解决方案。\n\n<!-- more -->\n\n## 准备工作\n\n这一套解决方案的原理大致就是使用 Docker 运行 EasyConnect 并暴露出一个 sock5 端口作为代理，然后用配置 Clash 的代理规则，按照一定的规则进行转发。一开始是在知乎的一篇文章：[M1 Mac 用不了深信服 easyconnet？ 用 docker+clash封印它](https://zhuanlan.zhihu.com/p/385845245) 中发现了这个方法，然而他的情况和我稍微有点不一样，他没有连接远程桌面等需求，并且写的也比较简略，所以我就萌发了写一篇 **保姆级** 流程介绍的想法。\n\n所以，我们需要用到的软件有：\n\n* Docker\n* Clash\n* VNC Viewer（如果你用的 EasyConnect 不需要图形界面就不需要）\n* 文本编辑器（比如 VS Code）\n\n### 安装软件\n\n#### 1 Docker\n\n不同的平台安装 Docker 有些不一样，Windows 略微麻烦一些，请按照官网的教程（英文）： [Windows](https://docs.docker.com/docker-for-windows/install/)，[MacOS](https://docs.docker.com/docker-for-mac/install/)，或者菜鸟教程（中文）：[Windows](https://www.runoob.com/docker/windows-docker-install.html)，[MacOS](https://www.runoob.com/docker/macos-docker-install.html)一步步进行安装，更推荐官网。\n\n#### 2 Clash\n\n##### Windows\n\n在 Clash For Windows 的 Github 上的 [Release](https://github.com/Fndroid/clash_for_windows_pkg/releases) 页面选择带有 **win** 标识或者后缀为 .exe 的版本点击进行下载，最好选择后缀名为 **.7z** 的压缩包，下载下来后不用安装，解压即可使用。\n\n##### MacOS\n\n同样是在 Clash For Windows 的 Github 上的 [Release](https://github.com/Fndroid/clash_for_windows_pkg/releases) 页面选择相应的版本点击进行下载，不过要选择带有 mac 标识版本，如果你是 M1 芯片的 Mac，请选择带有 **arm64** 标识的版本。\n\n当然你也可以选择 ClashX 等具有相应功能的其他软件。\n\n![选择相应的版本下载](https://ab84760.webp.li/%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E7%9A%84%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD.png)\n\n#### 3 VNC Viewer\n\n如果你用的 EasyConnect **需要** 图形界面登录的话，就需要安装 VNC Viewer，否则可以跳过这一步，如果不知道可以先不装，到后面用 Docker 运行 EasyConnect 的时候提示你不能在命令行界面完成再返回这一步安装。\n\nVNC Viewer 的安装非常简单，到官网的 [下载](https://www.realvnc.com/en/connect/download/viewer/) 页面，选择相应的版本下载，然后一路下一步就完成了。\n\n#### 4 文本编辑器\n\n因为需要编辑一些配置文件，所以需要用到文本编辑器，推荐使用 [VS Code](https://code.visualstudio.com/)，不使用记事本的原因是它不带高亮，没有单词拼写提示也不会自动调整格式，可能会导致你有一些缩进、拼写和标点等方面的错误比较难发现。\n\n## 封印 EasyConnect\n\n### 使用 Docker 运行 EasyConnect\n\n首先不要忘了确定你的 Docker 是正在运行的，使用 Windows 的同学应该可以在右下角看到一只顶着集装箱的小鲸鱼的图标。打开一个命令行/终端，根据你需不需要图形界面输入不同的命令。\n\n**纯命令行版：**\n\n```bash\ntouch ~/.easyconn\ndocker run --device /dev/net/tun --cap-add NET_ADMIN -ti -v $HOME/.easyconn:/root/.easyconn -p 127.0.0.1:1080:1080 -e EC_VER=7.6.7 hagb/docker-easyconnect:cli\n```\n\n其中 `-e EC_VER=7.6.7` 表示使用 `7.6.7` 版本的 EasyConnect，请根据实际情况修改版本号，根据提示输入服务器地址、登陆凭据。\n\n**图形界面版：**\n\n```bash\ndocker run --device /dev/net/tun --cap-add NET_ADMIN -ti -e PASSWORD=xxxx -v $HOME/.ecdata:/root -p 127.0.0.1:5901:5901 -p 127.0.0.1:1080:1080 hagb/docker-easyconnect:7.6.7\n```\n\n其中 `hagb/docker-easyconnect:7.6.7` 表示使用 `7.6.7` 版本的 EasyConnect，请根据实际情况修改版本号。输入完之后打开 VNC Viewer，点击左上角的 **File -> New connection**，或者在空白处 **右键 -> New connection**，或者使用快捷键 **Ctrl + N**，新建一个链接，在弹出的对话框中的 VNC Server 中填入 `127.0.0.1:5901`，Name 可以不填或者填你喜欢的名称作为一个标签。\n\n![VNC Viewer配置](https://ab84760.webp.li/VNC%20Viewer%E9%85%8D%E7%BD%AE.png)\n\n点击 OK 后，双击我们刚刚创建好的链接，输入密码 XXXX，就可以进行连接了，进去之后是熟悉的界面，输入地址，用户名和密码之后就可以关掉了。\n\n顺便说一句，在 Docker 中运行的 EasyConnect 都不用输验证码，就更加方便了，由于这个项目本身是会记住你输入的服务器地址的，所以以后使用的时候只需要点一下登录按钮就可以了。\n\n进行到这一步，就会有一个 socks5 代理跑在你电脑的 **1080 端口了**，接下来就是配置 Clash，在我们需要的时候进行转发。\n\n有关于 docker-easyconnect 更详细的配置可以参考 [https://github.com/Hagb/docker-easyconnect](https://github.com/Hagb/docker-easyconnect)。\n\n### 配置 Clash\n\n#### 配置 Clash 代理规则\n\n这一篇只讲如何让你在需要的时候使用 EasyConnect 的 VPN 服务，如果你还需要配置其他代理，可以移步 [官方文档](https://docs.cfw.lbyczf.com/)，不过话说回来，如果你需要配置其他代理，你的机场应该有详细的教程。\n\n首先运行 Clash，点击左侧导航栏的 Profiles，你会看到一个默认的 config.yaml，如果你有其他配置文件也可以编辑其他配置文件。点击你想编辑的配置文件右边的形如 `< >` 的按钮，意思就是在文本编辑器中编辑配置文件，在最后增加：\n\n```yaml\n# 增加一个名字是 vpn 的 sock5 代理\nproxies:\n - {\"name\": \"vpn\", \"type\": \"socks5\", \"server\": \"127.0.0.1\", \"port\": \"1080\"}\n\n# 添加 ip-cidr 的规则\nrules:\n  - IP-CIDR,222.192.6.0/24,vpn\n```\n\n**【注意】**这里填写的 `222.192.6.0/24` 是指只有访问 `222.192.6.xxx` 的流量才会走上面配置的那个代理，需要根据你的实际情况进行更改。当然，你如果是编辑你自己的配置文件，需要在原来的 `proxies` 和 `rules` 下新增，而不能再新增这两个属性。\n\n到这一步，在 Clash 的 General 页面，将 System Proxy 打开，你就已经可以访问学校内网的网页了，但是不可以使用远程桌面等功能，如果需要使用这些功能，还需要进一步配置。\n\n#### 配置 TUN 模式\n\n对于 TUN 模式，官方文档是这么描述的：\n\n> 对于不遵循系统代理的软件，TUN 模式可以接管其流量并交由 CFW 处理，在 Windows 中，TUN 模式性能比 TAP 模式好。\n\n浏览器之类的应用都是使用系统代理的，一些非系统代理应用，可以通过设置被 CFW 接管。总之，配置 TUN 模式之后，我们的需求就可以实现了，启动 TUN 模式需要进行如下操作（MacOS 用户跳过前两步）：\n\n1. 打开 Clash 的 General 页面，找到 Home Directory，点击右边的 `Open Folder` 打开 `Home Directory` 文件夹；\n\n2. 进入网站 [Wintun](https://www.wintun.net/)，点击界面中 `Download Wintun xxx` 下载压缩包。根据系统版本将 `wintun-x.xx/wintun/bin` 对应目录中 `wintun.dll` 复制至 `Home Directory` 目录中。基于 `x64` 的处理器的 `64` 位操作系统请使用 `amd64` 版本，M1 版本的 Mac 选择 `arm64` 版本；\n\n3. 点击 General 中 Service Mode 右边 Manage，在打开窗口中安装服务模式，安装完成应用会自动重启，Service Mode 右边地球图标变为绿色即安装成功；\n\n4. 点击 **settings -> Profile Mixin -> YAML**，点击 **YAML** 右侧的 **Edit**，输入下面的内容，点击右下角的按钮保存。\n\n   ```yaml\n   mixin: \n     hosts:\n       'mtalk.google.com': 108.177.125.188\n       'services.googleapis.cn': 74.125.203.94\n       'raw.githubusercontent.com': 151.101.76.133\n     dns:\n       enable: true\n       default-nameserver:\n         - 223.5.5.5\n         - 1.0.0.1\n       ipv6: false\n       enhanced-mode: redir-host #fake-ip\n       nameserver:\n         - https://dns.rubyfish.cn/dns-query\n         - https://223.5.5.5/dns-query\n         - https://dns.pub/dns-query\n       fallback:\n         - https://1.0.0.1/dns-query\n         - https://public.dns.iij.jp/dns-query\n         - https://dns.twnic.tw/dns-query\n       fallback-filter:\n         geoip: true\n         ipcidr:\n         - 240.0.0.0/4\n         - 0.0.0.0/32\n         - 127.0.0.1/32\n       domain:\n         - +.google.com\n         - +.facebook.com\n         - +.twitter.com\n         - +.youtube.com\n         - +.xn--ngstr-lra8j.com\n         - +.google.cn\n         - +.googleapis.cn\n         - +.gvt1.com\n     tun: \n       enable: true\n       stack: gvisor\n       dns-hijack:\n         - 198.18.0.2:53\n       macOS-auto-route: true\n       macOS-auto-detect-interface: true # 自动检测出口网卡\n   ```\n\n5. 返回 general 页面开启 Mixin 即可，之后点击 connections 会发现所有连接都是 TUN 模式，这时候我们就完成了所有配置\n\n更详细的配置可以参考官方文档的 [TUN 模式](https://docs.cfw.lbyczf.com/contents/tun.html) 页面。\n\n#### 再次启动\n\n当你关掉命令行/终端窗口，或者重启电脑，想再次启动 Docker 时，我们只需要启动相应的容器，并且在 VNC Viewer 中点击登录就可以（如果你不使用图形界面的话只需要启动容器）。\n\n启动容器的操作就不用再去打上面创建容器时的那一串命令了，因为那一串命令的意思是创建容器、下载镜像、启动并进入容器，我们已经创建好了容器，以后只需要启动就行了。所以，我们先要知道我们有哪些容器，然后启动相应的容器就可以。\n\n首先，查看我们已有的容器\n\n```bash\ndocker ps -a\n```\n\n你应该会得到类似的输出，如果你是第一次使用 Docker，应该只有一个容器\n\n![查看容器](https://ab84760.webp.li/%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8.png)\n\n可以看到，我的第一个容器就是正在使用的，当我重启之后又想开启它的时候，只需要输入\n\n```bash\ndocker start 81f\n```\n\n就可以了，其中 `81f` 是我要启动的容器的 `ID` 也就是第一列的值，这个值很长，通常你只需要输入前几位就可以，或者你也可以记住容器的 `name`，使用\n\n```bash\ndocker start lucid_allen\n```\n\n来启动，容器的名字是可以在创建的时候指定的，也可以通过 `docker rename` 命令修改。\n\n如果你是 Windows 用户，双击右下角 Docker 的图标，你会看到一个可视化的管理界面，点击左侧导航栏的 **Containers / Apps** 也可以看到所有的容器，并且可以通过可视化的方式对容器进行操作。\n\n![可视化操作](https://ab84760.webp.li/%E5%8F%AF%E8%A7%86%E5%8C%96%E6%93%8D%E4%BD%9C.png)\n\n在开启容器之后，如果你需要图形界面操作就来到 VNC Viewer 中点击登录，并且开启 Clash 的 System Proxy 就完成了。\n\n## 卸载 EasyConnect\n\n前面说道，EasyConnect 的流氓之处之一就是非常难卸载，但是我还是根据网上的资料和我自己操作的经验总结出一套方法，这一套方法可能略显复杂，可能有多余的操作，不过按照这样操作是可以将 EasyConnect 完全卸载干净的。\n\n首先，找到 EasyConnect 的安装目录，双击运行他的卸载程序，等他运行完之后你会发现，这个目录并没有被完全删掉，还是有很多文件，这时候我们执行下列步骤：\n\n1. 全选 Shift + Delete，如果遇到不给删的就跳过，这时候还是会剩下很多文件。\n2. 断网重启电脑，来到安装目录下，把所有文件夹都改名，随便改成什么，再次重启\n3. 全选刚刚改过名的文件夹 Shift + Delete，如果这时候还删不了就把文件夹剪切到别的地方再删除\n4. 重启电脑，管理员权限打开命令行（如果你没有常用的命令行工具可以 Win + X 选择 **Windows PowerShell（管理员）**）\n5. 输入命令 `netsh winsock reset` 回车\n\n最后两步重置 winsock 非常重要，如果不执行很可能会出现各种客户端无法连接网络的情况。\n",
          "html": "<p>我们学校要使用深信服家的 EasyConnect 才能在外面连内网，我又经常需要连学校的电脑和数据库，在使用了一段时间 EasyConnect 之后，我发现这玩意儿不仅流氓，而且难用。流氓在于不用他的时候进程关不掉，卸载还卸载不干净，也不知道他到底要获取什么数据，关于深信服的黑料网上一搜一大堆。难用在于我一开他，虽然是能连上学校内网了，但是我们学校校园网非常差劲，速度本身就不快，还经常连不上 GitHub，用了他之后，我在路由器上配置的代理也没有用，所以我心想能不能抛弃这个流氓客户端，就在不久前，我终于找到了一套解决方案。</p>\n<h2>准备工作</h2>\n<p>这一套解决方案的原理大致就是使用 Docker 运行 EasyConnect 并暴露出一个 sock5 端口作为代理，然后用配置 Clash 的代理规则，按照一定的规则进行转发。一开始是在知乎的一篇文章：<a href=\"https://zhuanlan.zhihu.com/p/385845245\">M1 Mac 用不了深信服 easyconnet？ 用 docker+clash封印它</a> 中发现了这个方法，然而他的情况和我稍微有点不一样，他没有连接远程桌面等需求，并且写的也比较简略，所以我就萌发了写一篇 <strong>保姆级</strong> 流程介绍的想法。</p>\n<p>所以，我们需要用到的软件有：</p>\n<ul>\n<li>Docker</li>\n<li>Clash</li>\n<li>VNC Viewer（如果你用的 EasyConnect 不需要图形界面就不需要）</li>\n<li>文本编辑器（比如 VS Code）</li>\n</ul>\n<h3>安装软件</h3>\n<h4>1 Docker</h4>\n<p>不同的平台安装 Docker 有些不一样，Windows 略微麻烦一些，请按照官网的教程（英文）： <a href=\"https://docs.docker.com/docker-for-windows/install/\">Windows</a>，<a href=\"https://docs.docker.com/docker-for-mac/install/\">MacOS</a>，或者菜鸟教程（中文）：<a href=\"https://www.runoob.com/docker/windows-docker-install.html\">Windows</a>，<a href=\"https://www.runoob.com/docker/macos-docker-install.html\">MacOS</a>一步步进行安装，更推荐官网。</p>\n<h4>2 Clash</h4>\n<h5>Windows</h5>\n<p>在 Clash For Windows 的 Github 上的 <a href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\">Release</a> 页面选择带有 <strong>win</strong> 标识或者后缀为 .exe 的版本点击进行下载，最好选择后缀名为 <strong>.7z</strong> 的压缩包，下载下来后不用安装，解压即可使用。</p>\n<h5>MacOS</h5>\n<p>同样是在 Clash For Windows 的 Github 上的 <a href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\">Release</a> 页面选择相应的版本点击进行下载，不过要选择带有 mac 标识版本，如果你是 M1 芯片的 Mac，请选择带有 <strong>arm64</strong> 标识的版本。</p>\n<p>当然你也可以选择 ClashX 等具有相应功能的其他软件。</p>\n<p><img src=\"https://ab84760.webp.li/%E9%80%89%E6%8B%A9%E7%9B%B8%E5%BA%94%E7%9A%84%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD.png\" alt=\"选择相应的版本下载\"></p>\n<h4>3 VNC Viewer</h4>\n<p>如果你用的 EasyConnect <strong>需要</strong> 图形界面登录的话，就需要安装 VNC Viewer，否则可以跳过这一步，如果不知道可以先不装，到后面用 Docker 运行 EasyConnect 的时候提示你不能在命令行界面完成再返回这一步安装。</p>\n<p>VNC Viewer 的安装非常简单，到官网的 <a href=\"https://www.realvnc.com/en/connect/download/viewer/\">下载</a> 页面，选择相应的版本下载，然后一路下一步就完成了。</p>\n<h4>4 文本编辑器</h4>\n<p>因为需要编辑一些配置文件，所以需要用到文本编辑器，推荐使用 <a href=\"https://code.visualstudio.com/\">VS Code</a>，不使用记事本的原因是它不带高亮，没有单词拼写提示也不会自动调整格式，可能会导致你有一些缩进、拼写和标点等方面的错误比较难发现。</p>\n<h2>封印 EasyConnect</h2>\n<h3>使用 Docker 运行 EasyConnect</h3>\n<p>首先不要忘了确定你的 Docker 是正在运行的，使用 Windows 的同学应该可以在右下角看到一只顶着集装箱的小鲸鱼的图标。打开一个命令行/终端，根据你需不需要图形界面输入不同的命令。</p>\n<p><strong>纯命令行版：</strong></p>\n<pre><code class=\"language-bash\">touch ~/.easyconn\ndocker run --device /dev/net/tun --cap-add NET_ADMIN -ti -v $HOME/.easyconn:/root/.easyconn -p 127.0.0.1:1080:1080 -e EC_VER=7.6.7 hagb/docker-easyconnect:cli\n</code></pre>\n<p>其中 <code>-e EC_VER=7.6.7</code> 表示使用 <code>7.6.7</code> 版本的 EasyConnect，请根据实际情况修改版本号，根据提示输入服务器地址、登陆凭据。</p>\n<p><strong>图形界面版：</strong></p>\n<pre><code class=\"language-bash\">docker run --device /dev/net/tun --cap-add NET_ADMIN -ti -e PASSWORD=xxxx -v $HOME/.ecdata:/root -p 127.0.0.1:5901:5901 -p 127.0.0.1:1080:1080 hagb/docker-easyconnect:7.6.7\n</code></pre>\n<p>其中 <code>hagb/docker-easyconnect:7.6.7</code> 表示使用 <code>7.6.7</code> 版本的 EasyConnect，请根据实际情况修改版本号。输入完之后打开 VNC Viewer，点击左上角的 <strong>File -> New connection</strong>，或者在空白处 <strong>右键 -> New connection</strong>，或者使用快捷键 <strong>Ctrl + N</strong>，新建一个链接，在弹出的对话框中的 VNC Server 中填入 <code>127.0.0.1:5901</code>，Name 可以不填或者填你喜欢的名称作为一个标签。</p>\n<p><img src=\"https://ab84760.webp.li/VNC%20Viewer%E9%85%8D%E7%BD%AE.png\" alt=\"VNC Viewer配置\"></p>\n<p>点击 OK 后，双击我们刚刚创建好的链接，输入密码 XXXX，就可以进行连接了，进去之后是熟悉的界面，输入地址，用户名和密码之后就可以关掉了。</p>\n<p>顺便说一句，在 Docker 中运行的 EasyConnect 都不用输验证码，就更加方便了，由于这个项目本身是会记住你输入的服务器地址的，所以以后使用的时候只需要点一下登录按钮就可以了。</p>\n<p>进行到这一步，就会有一个 socks5 代理跑在你电脑的 <strong>1080 端口了</strong>，接下来就是配置 Clash，在我们需要的时候进行转发。</p>\n<p>有关于 docker-easyconnect 更详细的配置可以参考 <a href=\"https://github.com/Hagb/docker-easyconnect\">https://github.com/Hagb/docker-easyconnect</a>。</p>\n<h3>配置 Clash</h3>\n<h4>配置 Clash 代理规则</h4>\n<p>这一篇只讲如何让你在需要的时候使用 EasyConnect 的 VPN 服务，如果你还需要配置其他代理，可以移步 <a href=\"https://docs.cfw.lbyczf.com/\">官方文档</a>，不过话说回来，如果你需要配置其他代理，你的机场应该有详细的教程。</p>\n<p>首先运行 Clash，点击左侧导航栏的 Profiles，你会看到一个默认的 config.yaml，如果你有其他配置文件也可以编辑其他配置文件。点击你想编辑的配置文件右边的形如 <code>&#x3C; ></code> 的按钮，意思就是在文本编辑器中编辑配置文件，在最后增加：</p>\n<pre><code class=\"language-yaml\"># 增加一个名字是 vpn 的 sock5 代理\nproxies:\n - {\"name\": \"vpn\", \"type\": \"socks5\", \"server\": \"127.0.0.1\", \"port\": \"1080\"}\n\n# 添加 ip-cidr 的规则\nrules:\n  - IP-CIDR,222.192.6.0/24,vpn\n</code></pre>\n<p>**【注意】**这里填写的 <code>222.192.6.0/24</code> 是指只有访问 <code>222.192.6.xxx</code> 的流量才会走上面配置的那个代理，需要根据你的实际情况进行更改。当然，你如果是编辑你自己的配置文件，需要在原来的 <code>proxies</code> 和 <code>rules</code> 下新增，而不能再新增这两个属性。</p>\n<p>到这一步，在 Clash 的 General 页面，将 System Proxy 打开，你就已经可以访问学校内网的网页了，但是不可以使用远程桌面等功能，如果需要使用这些功能，还需要进一步配置。</p>\n<h4>配置 TUN 模式</h4>\n<p>对于 TUN 模式，官方文档是这么描述的：</p>\n<blockquote>\n<p>对于不遵循系统代理的软件，TUN 模式可以接管其流量并交由 CFW 处理，在 Windows 中，TUN 模式性能比 TAP 模式好。</p>\n</blockquote>\n<p>浏览器之类的应用都是使用系统代理的，一些非系统代理应用，可以通过设置被 CFW 接管。总之，配置 TUN 模式之后，我们的需求就可以实现了，启动 TUN 模式需要进行如下操作（MacOS 用户跳过前两步）：</p>\n<ol>\n<li>\n<p>打开 Clash 的 General 页面，找到 Home Directory，点击右边的 <code>Open Folder</code> 打开 <code>Home Directory</code> 文件夹；</p>\n</li>\n<li>\n<p>进入网站 <a href=\"https://www.wintun.net/\">Wintun</a>，点击界面中 <code>Download Wintun xxx</code> 下载压缩包。根据系统版本将 <code>wintun-x.xx/wintun/bin</code> 对应目录中 <code>wintun.dll</code> 复制至 <code>Home Directory</code> 目录中。基于 <code>x64</code> 的处理器的 <code>64</code> 位操作系统请使用 <code>amd64</code> 版本，M1 版本的 Mac 选择 <code>arm64</code> 版本；</p>\n</li>\n<li>\n<p>点击 General 中 Service Mode 右边 Manage，在打开窗口中安装服务模式，安装完成应用会自动重启，Service Mode 右边地球图标变为绿色即安装成功；</p>\n</li>\n<li>\n<p>点击 <strong>settings -> Profile Mixin -> YAML</strong>，点击 <strong>YAML</strong> 右侧的 <strong>Edit</strong>，输入下面的内容，点击右下角的按钮保存。</p>\n<pre><code class=\"language-yaml\">mixin: \n  hosts:\n    'mtalk.google.com': 108.177.125.188\n    'services.googleapis.cn': 74.125.203.94\n    'raw.githubusercontent.com': 151.101.76.133\n  dns:\n    enable: true\n    default-nameserver:\n      - 223.5.5.5\n      - 1.0.0.1\n    ipv6: false\n    enhanced-mode: redir-host #fake-ip\n    nameserver:\n      - https://dns.rubyfish.cn/dns-query\n      - https://223.5.5.5/dns-query\n      - https://dns.pub/dns-query\n    fallback:\n      - https://1.0.0.1/dns-query\n      - https://public.dns.iij.jp/dns-query\n      - https://dns.twnic.tw/dns-query\n    fallback-filter:\n      geoip: true\n      ipcidr:\n      - 240.0.0.0/4\n      - 0.0.0.0/32\n      - 127.0.0.1/32\n    domain:\n      - +.google.com\n      - +.facebook.com\n      - +.twitter.com\n      - +.youtube.com\n      - +.xn--ngstr-lra8j.com\n      - +.google.cn\n      - +.googleapis.cn\n      - +.gvt1.com\n  tun: \n    enable: true\n    stack: gvisor\n    dns-hijack:\n      - 198.18.0.2:53\n    macOS-auto-route: true\n    macOS-auto-detect-interface: true # 自动检测出口网卡\n</code></pre>\n</li>\n<li>\n<p>返回 general 页面开启 Mixin 即可，之后点击 connections 会发现所有连接都是 TUN 模式，这时候我们就完成了所有配置</p>\n</li>\n</ol>\n<p>更详细的配置可以参考官方文档的 <a href=\"https://docs.cfw.lbyczf.com/contents/tun.html\">TUN 模式</a> 页面。</p>\n<h4>再次启动</h4>\n<p>当你关掉命令行/终端窗口，或者重启电脑，想再次启动 Docker 时，我们只需要启动相应的容器，并且在 VNC Viewer 中点击登录就可以（如果你不使用图形界面的话只需要启动容器）。</p>\n<p>启动容器的操作就不用再去打上面创建容器时的那一串命令了，因为那一串命令的意思是创建容器、下载镜像、启动并进入容器，我们已经创建好了容器，以后只需要启动就行了。所以，我们先要知道我们有哪些容器，然后启动相应的容器就可以。</p>\n<p>首先，查看我们已有的容器</p>\n<pre><code class=\"language-bash\">docker ps -a\n</code></pre>\n<p>你应该会得到类似的输出，如果你是第一次使用 Docker，应该只有一个容器</p>\n<p><img src=\"https://ab84760.webp.li/%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8.png\" alt=\"查看容器\"></p>\n<p>可以看到，我的第一个容器就是正在使用的，当我重启之后又想开启它的时候，只需要输入</p>\n<pre><code class=\"language-bash\">docker start 81f\n</code></pre>\n<p>就可以了，其中 <code>81f</code> 是我要启动的容器的 <code>ID</code> 也就是第一列的值，这个值很长，通常你只需要输入前几位就可以，或者你也可以记住容器的 <code>name</code>，使用</p>\n<pre><code class=\"language-bash\">docker start lucid_allen\n</code></pre>\n<p>来启动，容器的名字是可以在创建的时候指定的，也可以通过 <code>docker rename</code> 命令修改。</p>\n<p>如果你是 Windows 用户，双击右下角 Docker 的图标，你会看到一个可视化的管理界面，点击左侧导航栏的 <strong>Containers / Apps</strong> 也可以看到所有的容器，并且可以通过可视化的方式对容器进行操作。</p>\n<p><img src=\"https://ab84760.webp.li/%E5%8F%AF%E8%A7%86%E5%8C%96%E6%93%8D%E4%BD%9C.png\" alt=\"可视化操作\"></p>\n<p>在开启容器之后，如果你需要图形界面操作就来到 VNC Viewer 中点击登录，并且开启 Clash 的 System Proxy 就完成了。</p>\n<h2>卸载 EasyConnect</h2>\n<p>前面说道，EasyConnect 的流氓之处之一就是非常难卸载，但是我还是根据网上的资料和我自己操作的经验总结出一套方法，这一套方法可能略显复杂，可能有多余的操作，不过按照这样操作是可以将 EasyConnect 完全卸载干净的。</p>\n<p>首先，找到 EasyConnect 的安装目录，双击运行他的卸载程序，等他运行完之后你会发现，这个目录并没有被完全删掉，还是有很多文件，这时候我们执行下列步骤：</p>\n<ol>\n<li>全选 Shift + Delete，如果遇到不给删的就跳过，这时候还是会剩下很多文件。</li>\n<li>断网重启电脑，来到安装目录下，把所有文件夹都改名，随便改成什么，再次重启</li>\n<li>全选刚刚改过名的文件夹 Shift + Delete，如果这时候还删不了就把文件夹剪切到别的地方再删除</li>\n<li>重启电脑，管理员权限打开命令行（如果你没有常用的命令行工具可以 Win + X 选择 <strong>Windows PowerShell（管理员）</strong>）</li>\n<li>输入命令 <code>netsh winsock reset</code> 回车</li>\n</ol>\n<p>最后两步重置 winsock 非常重要，如果不执行很可能会出现各种客户端无法连接网络的情况。</p>"
        },
        "_id": "posts/seal-easyconnect-with-docker.md",
        "_raw": {
          "sourceFilePath": "posts/seal-easyconnect-with-docker.md",
          "sourceFileName": "seal-easyconnect-with-docker.md",
          "sourceFileDir": "posts",
          "contentType": "markdown",
          "flattenedPath": "posts/seal-easyconnect-with-docker"
        },
        "type": "Post",
        "url": "/post/seal-easyconnect-with-docker",
        "excerpt": "我们学校要使用深信服家的 EasyConnect 才能在外面连内网，我又经常需要连学校的电脑和数据库，在使用了一段时间 EasyConnect 之后，我发现这玩意儿不仅流氓，而且难用。流氓在于不用他的时候进程关不掉，卸载还卸载不干净，也不知道他到底要获取什么数据，关于深信服的黑料网上一搜一大堆。难用在于我一开他，虽然是能连上学校内网了，但是我们学校校园网非常差劲，速度本身就不快，还经常连不上 GitHub，用了他之后，我在路由器上配置的代理也没有用，所以我心想能不能抛弃这个流氓客户端，就在不久前，我终于找到了一套解决方案。",
        "slug": "seal-easyconnect-with-docker",
        "readingTime": "NaN分钟阅读"
      },
      "documentHash": "1728572628671",
      "hasWarnings": false,
      "documentTypeName": "Post"
    }
  }
}
