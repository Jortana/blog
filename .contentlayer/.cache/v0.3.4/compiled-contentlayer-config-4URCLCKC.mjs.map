{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from 'contentlayer/source-files'\nimport { readingTime } from 'reading-time-estimator'\n\nconst ReadingTime = defineNestedType(() => ({\n  name: 'ReadingTime',\n  fields: {\n    text: { type: 'string' },\n  },\n}))\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: 'posts/*.md',\n  contentType: 'markdown',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    category: { type: 'string', required: true },\n    tags: { type: 'list', of: { type: 'string' }, required: true },\n    headerImage: { type: 'string', required: false },\n    draft: { type: 'boolean', default: false },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (post) =>\n        `/post/${post._raw.flattenedPath.replace('posts/', '')}`,\n    },\n    excerpt: {\n      type: 'string',\n      resolve: async (post) => {\n        const content = post.body.raw\n\n        // \u68C0\u67E5\u662F\u5426\u5305\u542B\u6807\u8BC6\uFF0C\u5982\u679C\u6709\u5219\u622A\u53D6\u6807\u8BC6\u524D\u7684\u5185\u5BB9\uFF0C\u5426\u5219\u622A\u53D6\u524D 200 \u4E2A\u5B57\u7B26\n        const excerptContent =\n          content.split('<!-- more -->')[0] || `${content.slice(0, 200)}...`\n\n        // \u5C06 Markdown \u8F6C\u6362\u4E3A\u7EAF\u6587\u672C\uFF0C\u53BB\u9664 Markdown \u683C\u5F0F\u7B26\u53F7\n        const plainTextExcerpt = excerptContent\n          .replace(/!\\[.*?\\]\\(.*?\\)/g, '') // \u79FB\u9664\u56FE\u7247\n          .replace(/\\[([^\\]]+)\\]\\((.*?)\\)/g, '$1') // \u79FB\u9664\u94FE\u63A5\u4F46\u4FDD\u7559\u94FE\u63A5\u6587\u672C\n          .replace(/[`*_{}[\\]()#+\\-.!]/g, '') // \u79FB\u9664\u5176\u4ED6 Markdown \u683C\u5F0F\u7B26\u53F7\n          .replace(/\\n/g, ' ') // \u5C06\u6362\u884C\u7B26\u66FF\u6362\u4E3A\u7A7A\u683C\n          .trim()\n\n        return plainTextExcerpt\n      },\n    },\n    headerImage: {\n      type: 'string',\n      resolve: (post) => {\n        // \u5982\u679C\u624B\u52A8\u6307\u5B9A\u4E86 headerImage\uFF0C\u5C31\u4F7F\u7528\u5B83\n        if (post.headerImage) return post.headerImage\n\n        // \u4F7F\u7528\u6B63\u5219\u8868\u8FBE\u5F0F\u5339\u914D Markdown \u4E2D\u7684\u7B2C\u4E00\u5F20\u56FE\u7247\n        const imageRegex = /!\\[.*?\\]\\((.*?)\\)/\n        const match = post.body.raw.match(imageRegex)\n        return match ? match[1] : null // \u8FD4\u56DE\u5339\u914D\u5230\u7684\u56FE\u7247 URL\uFF0C\u6216 null\n      },\n    },\n    slug: {\n      type: 'string',\n      resolve: (post) => post._raw.flattenedPath.replace('posts/', ''),\n    },\n    readingTime: {\n      type: 'nested',\n      of: ReadingTime,\n      resolve: (post) => {\n        const stats = readingTime(post.body.raw, 400, 'cn')\n\n        const minutes = Math.ceil(stats.minutes) // \u53D6\u6574\u5206\u949F\u6570\n\n        // \u6839\u636E\u5206\u949F\u6570\u663E\u793A\u4E2D\u6587\u683C\u5F0F\u7684\u9605\u8BFB\u65F6\u95F4\n        if (minutes <= 1) {\n          return { text: '\u5927\u7EA6\u9700\u8981 1 \u5206\u949F\u9605\u8BFB' }\n        }\n\n        return { text: `\u5927\u7EA6\u9700\u8981 ${minutes} \u5206\u949F\u9605\u8BFB` }\n      },\n    },\n  },\n}))\n\nexport const Thought = defineDocumentType(() => ({\n  name: 'Thought',\n  filePathPattern: 'thoughts/*.md',\n  contentType: 'markdown',\n}))\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Post, Thought],\n})\n"],
  "mappings": ";AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,SAAS,mBAAmB;AAE5B,IAAM,cAAc,iBAAiB,OAAO;AAAA,EAC1C,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,MAAM,EAAE,MAAM,SAAS;AAAA,EACzB;AACF,EAAE;AAEK,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,UAAU,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC3C,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,KAAK;AAAA,IAC7D,aAAa,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC/C,OAAO,EAAE,MAAM,WAAW,SAAS,MAAM;AAAA,EAC3C;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SACR,SAAS,KAAK,KAAK,cAAc,QAAQ,UAAU,EAAE;AAAA,IACzD;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,SAAS,OAAO,SAAS;AACvB,cAAM,UAAU,KAAK,KAAK;AAG1B,cAAM,iBACJ,QAAQ,MAAM,eAAe,EAAE,CAAC,KAAK,GAAG,QAAQ,MAAM,GAAG,GAAG;AAG9D,cAAM,mBAAmB,eACtB,QAAQ,oBAAoB,EAAE,EAC9B,QAAQ,0BAA0B,IAAI,EACtC,QAAQ,uBAAuB,EAAE,EACjC,QAAQ,OAAO,GAAG,EAClB,KAAK;AAER,eAAO;AAAA,MACT;AAAA,IACF;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS,CAAC,SAAS;AAEjB,YAAI,KAAK;AAAa,iBAAO,KAAK;AAGlC,cAAM,aAAa;AACnB,cAAM,QAAQ,KAAK,KAAK,IAAI,MAAM,UAAU;AAC5C,eAAO,QAAQ,MAAM,CAAC,IAAI;AAAA,MAC5B;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,KAAK,KAAK,cAAc,QAAQ,UAAU,EAAE;AAAA,IACjE;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,SAAS,CAAC,SAAS;AACjB,cAAM,QAAQ,YAAY,KAAK,KAAK,KAAK,KAAK,IAAI;AAElD,cAAM,UAAU,KAAK,KAAK,MAAM,OAAO;AAGvC,YAAI,WAAW,GAAG;AAChB,iBAAO,EAAE,MAAM,sDAAc;AAAA,QAC/B;AAEA,eAAO,EAAE,MAAM,4BAAQ,mCAAe;AAAA,MACxC;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEK,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AACf,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,OAAO;AAC/B,CAAC;",
  "names": []
}
